import json, logging, os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, ParseMode, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    CallbackQuery
from aiogram.dispatcher.filters import Text

API_TOKEN = os.getenv('BOT_TOKEN')

# Configure logging
logging.basicConfig(level=logging.INFO, filename='bot_log.log')
# TODO: Configure user actions logging

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN, parse_mode='html')
dp = Dispatcher(bot)

# --------------------------- JSON ----------------------------
with open('questions.json', 'r') as file:
    questions_answers_json = json.load(file)

with open('advice.json', 'r') as file:
    advice_json = json.load(file)

question_keys = questions_answers_json.keys()  # Extract question_keys from dict
advice_keys = advice_json.keys()  # Extract advise_keys from dict

# ----------------------- REGULAR MENU ------------------------

questions_markup = (ReplyKeyboardMarkup(resize_keyboard=True, row_width=3, one_time_keyboard=True)
                    .add(*question_keys))  # Dialogue questions

main_markup = (ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
               .add('üí¨ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞', 'üèãÔ∏è‚Äç‚ôÇ –°–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', 'üìö –ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤')
               .row('ü§ì –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'))

home_btn = KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©')
return_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(home_btn)  # Leading back to the main menu

advice_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(*advice_keys)

# ------------------------ INLINE MENU ------------------------
more_args_inln_btn = InlineKeyboardButton('–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', callback_data='give_me_arguments')
more_quests_inln_btn = InlineKeyboardButton('–ï—â–µ –≤–æ–ø—Ä–æ—Å', callback_data='some callback')
like_inln_btn = InlineKeyboardButton('üëç', callback_data='some callback')
dislike_inln_btn = InlineKeyboardButton('üëé', callback_data='some callback')
feedback_inln_btn = InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='some callback')
arg_db_inln_btn = InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–∞–∑—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤', callback_data='external_reference',
                                       url='https://relocation.guide/most')  # FIXME The link needs to be replaced
home_inln_btn = InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©', callback_data='main_menu')

dialogue_inln_markup = (InlineKeyboardMarkup(row_width=2)
                        .add(more_args_inln_btn, more_quests_inln_btn)
                        .add(like_inln_btn, dislike_inln_btn)
                        .row(feedback_inln_btn))

theory_inln_markup = (InlineKeyboardMarkup()
                      .row(arg_db_inln_btn)
                      .row(home_inln_btn))


# -------------------- CALLBACK HANDLERS ----------------------
@dp.callback_query_handler(text='external_reference')
async def callback_arg_db_inln_btn(call: CallbackQuery):
    await call.answer(cache_time=10)


@dp.callback_query_handler(text='main_menu')
async def callback_home_inln_btn(call: CallbackQuery):
    await call.answer(cache_time=10)
    await start_handler(call.message)


# --------------------- MESSAGE HANDLERS ----------------------
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id=} {user_full_name=}')

    await message.answer_photo(
        # TODO: Add photo ids to the appropriate list
        photo='AgACAgIAAxkBAAEaAo5jdMo3w3PzcGd8WAPERpuMCYU6aAACmcwxGwUmqUsuOzhZ3YjMvwEAAwIAA3MAAysE',
        caption='–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å?')
    await message.answer("üí¨ <b>–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞</b>\n –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n\n"
                         "üèãÔ∏è‚Äç‚ôÇ <b>–°–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</b>\n –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–∏–∞–ª–æ–≥—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n\n"
                         "üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</b>\n –£–∑–Ω–∞—Ç—å, –∫–∞–∫ –±–µ—Ä–µ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–ª–∏–∑–∫–∏–º–∏.\n\n"
                         "üìö <b>–ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>\n –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
                         "ü§ì <b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</b>\n –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º –æ –ø—Ä–æ–µ–∫—Ç–µ.", reply_markup=main_markup)


# TODO: JSON does not allow wrapping links, so the text will look slightly worse than in the constructor

@dp.message_handler(commands=['chat'])
@dp.message_handler(Text(equals='üí¨ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞'))
async def dialog_mode(message: types.Message):
    await  message.answer_photo(
        photo="AgACAgIAAxkBAAEaAsZjdM8Y_KXF9-ssyr5wl3et_2XJvAACu8wxGwUmqUtBsWahHEFkZgEAAwIAA3MAAysE",
        caption='üü¢ –ú–û–°–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ—Ä–∞–∑—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,'
                ' –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç–¥–µ–ª–∏—Ç—å –ª–æ–∂—å –æ—Ç –ø—Ä–∞–≤–¥—ã. –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∏—Ö —Å–∏–ª—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ú–û–°–¢ –µ—â–µ –∫—Ä–µ–ø—á–µ.')
    await  message.answer('<i>–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–∞</i>\n\n'
                          '–°–æ–±–µ—Å–µ–¥–Ω–∏_—Ü–∞ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º: <b>¬´–ú—ã –º–Ω–æ–≥–æ–≥–æ –Ω–µ –∑–Ω–∞–µ–º, –≤—Å—ë –Ω–µ —Ç–∞–∫ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ¬ª.</b>\n\n'
                          '<b>–§—Ä–∞–∑–∞-–º–æ—Å—Ç ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º</b> ‚¨á\n'
                          '–°–æ–≥–ª–∞—à—É—Å—å, —á—Ç–æ –º—ã –º–Ω–æ–≥–æ–≥–æ –Ω–µ –∑–Ω–∞–µ–º. –ù–æ –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äì'
                          ' –≤—ã—Å—à–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ–±—â–µ—Å—Ç–≤–∞, –≤–µ—Ä–Ω–æ?\n\n'
                          '<b>–ê—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã</b> ‚¨á\n'
                          '–Ø –∑–Ω–∞—é –æ–¥–Ω–æ: –≤–æ–π–Ω–∞ –Ω–µ—Å–µ—Ç —Å–º–µ—Ä—Ç—å. –ò–∑-–∑–∞ –≤–æ–π–Ω —Å—Ç—Ä–∞–¥–∞—é—Ç –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏.'
                          ' –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—É—á–∏–ª–∞ –Ω–∞—Å —ç—Ç–æ–º—É, –Ω–æ –ø–æ—á–µ–º—É-—Ç–æ –º—ã –¥—É–º–∞–µ–º, —á—Ç–æ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–æ–π–Ω—É –±–µ–∑ –∂–µ—Ä—Ç–≤.'
                          ' –¢–∞–∫ –Ω–µ –±—ã–≤–∞–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é.\n\n'
                          '<b>–ù–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</b> ‚¨á\n'
                          '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?\n\n'
                          '–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –≤–º–µ—Å—Ç–µ, –Ω–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω–∏ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n\n'
                          '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞,'
                          ' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü—É—Ç–∏–Ω –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç¬ª –∏–ª–∏ ¬´–≠—Ç–æ –≤–æ–π–Ω–∞ —Å –ù–ê–¢–û¬ª ‚¨á',
                          reply_markup=questions_markup)


@dp.message_handler(commands=['practice'])
@dp.message_handler(Text(equals='üèãÔ∏è‚Äç‚ôÇ –°–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞'))
async def dialog_mode(message: types.Message):
    await  message.answer_photo(
        photo="AgACAgIAAxkBAAEaA8FjdO1utUgbzQMZt_DGNTSYSj6GiQACSL4xG1qJqUugWOSv5-VzeQEAAwIAA3MAAysE",
        caption='üü¢ –ú–û–°–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.')
    await  message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã —É–º–µ–µ—Ç–µ –±–æ—Ä–æ—Ç—å—Å—è —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–æ–π.'
                          ' –ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å 10 –º–∏—Ñ–æ–≤ –æ –≤–æ–π–Ω–µ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–æ–±—Ä–∞–ª–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî'
                          ' –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ, –∞ –±–æ—Ç –ú–û–°–¢ –¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.',
                          reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=['advice'])
@dp.message_handler(Text(equals='üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞'))
async def advice_mode(message: types.Message):
    await  message.answer_photo(
        # TODO: if-else statement when photo is not found
        photo="AgACAgIAAxkBAAEaA9ljdO_uOD1eGSrKJ6IfEx5oYrH5SQACVr4xG1qJqUsuemllaMkO8wEAAwIAA3MAAysE",
        caption='üü¢ –°–æ–±—Ä–∞–ª–∏ —Å–æ–≤–µ—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –æ —Ç–æ–º, –∫–∞–∫ –Ω–µ —Å–æ–π—Ç–∏ —Å —É–º–∞ –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –≤–æ–π–Ω–µ —Å –±–ª–∏–∑–∫–∏–º–∏,'
                ' —á–µ–≥–æ –æ–∂–∏–¥–∞—Ç—å, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Å—Ç–∏ —Å–µ–±—è.', reply_markup=types.ReplyKeyboardRemove())
    await  message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å ‚¨á',
                          reply_markup=advice_markup)


@dp.message_handler(commands=['theory'])
@dp.message_handler(Text(equals='üìö –ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤'))
async def advice_mode(message: types.Message):
    await  message.answer_photo(
        photo="AgACAgIAAxkBAAEaBQRjdRityX2vqAP6s_KNFo7wfAOp7AACKL8xG1qJqUu5AkIe0ljE4AEAAwIAA3MAAysE",
        caption='–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è –±–æ—Ä—Ü–∞ —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–æ–π ‚Äî —Å–∞–º—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –≤–∏–¥–µ–æ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.'
                ' –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.',
        reply_markup=theory_inln_markup)


@dp.message_handler()
async def all_the_modes_qa(message: types.Message):
    if message.text in questions_answers_json:
        # FIXME: This behavior requires more discussion. Perhaps you should pass JSON with a pre-formatted string
        msg = '<b>–§—Ä–∞–∑–∞-–º–æ—Å—Ç</b> ‚¨á\n' + questions_answers_json[message.text][0] \
              + '\n\n<b>–ê—Ä–≥—É–º–µ–Ω—Ç ‚¨á</b>\n' + questions_answers_json[message.text][1] \
              + '\n\n<b>–ù–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å ‚¨á</b>\n' + questions_answers_json[message.text][2]
        await  message.answer('üí¨', reply_markup=return_markup)
        await  message.answer(msg, reply_markup=dialogue_inln_markup)
    elif message.text in advice_keys:
        for i in advice_json[message.text]: await message.answer(i)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©":
        await  start_handler(message)  # Back to start
    elif message.text == "üìö –ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤":
        await  message.answer('–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=main_markup)
    else:
        await  message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ ‚¨á',
                              reply_markup=questions_markup)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

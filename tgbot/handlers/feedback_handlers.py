from __future__ import annotations

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from tgbot.kb import ReplyMarkups
from tgbot.utils import FSMFeedback, SQLRequests, SQLInserts, SectionName, HashData

commands_list = ['/start', '/menu', '/chat', '/practice', '/advice', '/theory', '/feedback', '/privacy',
                 'ü§ì –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–û—Ç–º–µ–Ω–∞']


def register_feedback_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(fsm_feedback, Text(contains='–æ—Ç–∑—ã–≤', ignore_case=True), state=None)
    dp.register_message_handler(fsm_feedback, commands=['feedback'], state=None)
    dp.register_message_handler(fsm_confirm_feedback, state=FSMFeedback.feedback)
    dp.register_message_handler(fsm_send_feedback, state=FSMFeedback.send_feedback)
    dp.register_message_handler(fsm_private_contacts, state=FSMFeedback.send_private_contacts)
    dp.register_callback_query_handler(cb_feedback, text='feedback', state=None)


async def fsm_feedback(message: Message) -> None:
    SectionName.s_name = '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'  # for logging purposes
    await  message.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ ‚¨á', reply_markup=ReplyMarkups.create_rm(1, True, '–û—Ç–º–µ–Ω–∞'))
    await FSMFeedback.feedback.set()  # state: feedback


# WARNING: Develop options for completing FSM. Not all state.finish() options have been explored
async def fsm_confirm_feedback(message: Message, state: FSMContext) -> None:
    if message.text in commands_list:
        await message.answer('–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                             reply_markup=ReplyMarkups
                             .create_rm(2, True, *SQLRequests
                                        .select_by_table_and_column('main_menu', 'main_menu_name')))
        return await state.finish()
    async with state.proxy() as data: data['user_feedback'] = message.text
    await  message.reply('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?', reply_markup=ReplyMarkups.create_rm(2, True, '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–û—Ç–º–µ–Ω–∞'))
    await FSMFeedback.next()


async def fsm_send_feedback(message: Message, state: FSMContext) -> None:  # TODO: Checking message for text only type!
    if message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        hash_user_id = HashData.hash_data(message.from_user.id)[54:]
        datetime = str(message.date)
        async with state.proxy() as data:
            SQLInserts.send_feedback(user_id=hash_user_id, datetime=datetime, feedback=data['user_feedback'])
        await message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ü§ó',
                             reply_markup=ReplyMarkups
                             .create_rm(2, True, *SQLRequests
                                        .select_by_table_and_column('main_menu', 'main_menu_name')))
        await message.answer('–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–¥—Ä–æ–±–Ω–æ '
                             '–∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ ‚¨á\n\n'
                             '–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º—ã —Å–º–æ–∂–µ–º —É–≤–∏–¥–µ—Ç—å –≤–∞—à <b>telegram ID</b>, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –Ω–∞–ø—Ä—è–º—É—é. '
                             '–î–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É <b>—É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞</b>.\n\n'
                             '–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–∏—Å–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"\n\n'
                             '–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ ¬´–ú–û–°–¢¬ª.', reply_markup=ReplyMarkups
                             .create_rm(2, True, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        async with state.proxy() as data:
            data['user_feedback'] = message.text
        await FSMFeedback.next()
    else:
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞!',
                             reply_markup=ReplyMarkups
                             .create_rm(2, True, *SQLRequests
                                        .select_by_table_and_column('main_menu', 'main_menu_name')))
        await message.delete()
        return await state.finish()


async def fsm_private_contacts(message: Message, state: FSMContext) -> Message | None:
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        from tgbot.handlers import main_menu
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()
        return await main_menu(message, state)  # type: ignore

    elif message.text in commands_list:
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                                    reply_markup=ReplyMarkups
                                    .create_rm(2, True, *SQLRequests
                                               .select_by_table_and_column('main_menu', 'main_menu_name')))

    datetime = str(message.date)
    SQLInserts.send_feedback(user_id=message.from_user.id, datetime=datetime, feedback=message.text)
    await message.delete()
    await message.answer('–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Å–ø–∞—Å–∏–±–æ –≤–∞–º –µ—â–µ —Ä–∞–∑! ‚ò∫', reply_markup=ReplyMarkups
                         .create_rm(2, True, *SQLRequests
                                    .select_by_table_and_column('main_menu', 'main_menu_name')))
    return await state.finish()


async def cb_feedback(call: CallbackQuery) -> None:
    await call.answer(cache_time=5)
    await fsm_feedback(call.message)

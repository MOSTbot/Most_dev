from __future__ import annotations

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from tgbot.api import GoogleSheetsAPI

from tgbot.kb import ReplyMarkups, InlineMarkups
from tgbot.utils import FSMAddAdmin, FSMDeleteAdmin, SQLInserts, SQLRequests, SQLDeletions


def register_admin_handlers(dp: Dispatcher) -> None:
    dp.register_callback_query_handler(get_data_from_gs, text='get_data_from_gs', state='*', is_su=True)
    dp.register_message_handler(admin_start, commands=["start"], state=None, is_su=True)
    # ------------------- PROMOTE TO ADMIN -------------------
    dp.register_callback_query_handler(add_new_admin, text='admin_promote_ib', state='*', is_su=True)
    dp.register_message_handler(new_admin_id, state=FSMAddAdmin.add_admin_id, is_su=True)
    dp.register_message_handler(new_admin_name, state=FSMAddAdmin.add_admin_name, is_su=True)
    dp.register_message_handler(new_admin_confirm, state=FSMAddAdmin.confirm, is_su=True)
    # --------------------- REMOVE ADMIN ---------------------
    dp.register_callback_query_handler(delete_admin_from_list, text='admin_remove_ib', state='*', is_su=True)
    dp.register_message_handler(delete_admin_id, state=FSMDeleteAdmin.delete_admin_id, is_su=True)
    dp.register_message_handler(delete_admin_confirm, state=FSMDeleteAdmin.confirm, is_su=True)
    # ------------------- SELECT ALL ADMINS ------------------
    dp.register_callback_query_handler(select_admins, text='admins_list_ib', state='*', is_su=True)
    # ------------------- LAST 10 FEEDBACKS ------------------
    dp.register_callback_query_handler(last_10_feedbacks, text='last_10_feedbacks_ib', state='*', is_su=True)


async def admin_start(message: Message) -> None:
    await message.answer_photo(photo=open('tgbot/assets/start.jpg', 'rb'))
    await message.answer('<b>–ú—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –∑–∞ —Ç–µ—Ö, –∫–æ–≥–æ –ø—Ä–∏—Ä—É—á–∏–ª–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞</b>.\n'
                         '–û—Å–æ–±–µ–Ω–Ω–æ –∑–∞ —Ä–æ–¥–Ω—ã—Ö, –ª—é–±–∏–º—ã—Ö –∏ –¥—Ä—É–∑–µ–π.\n\n'
                         '–†–∞–∑–≤–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–¥—É?\n'
                         '–£–≤—ã, –º–Ω–æ–≥–∏–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å —Å —Ç–µ–º, —á—Ç–æ '
                         '<b>–ø—Ä–∞–≤–¥—É –Ω–µ —Å–ª—ã—à–∞—Ç –∏–ª–∏ –Ω–µ —Ö–æ—Ç—è—Ç —Å–ª—ã—à–∞—Ç—å</b>. –ù–æ —ç—Ç–æ –Ω–µ –ø–æ–≤–æ–¥ —Å–¥–∞–≤–∞—Ç—å—Å—è.\n\n'
                         '–ú–û–°–¢ ‚Äî c–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç <a href="https://relocation.guide/">–≥–∞–π–¥–∞ –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π –º–∏—Ä</a> –∏ XZ foundation. '
                         '–≠—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –±–ª–∏–∑–∫–∏–º–∏ –æ –≤–æ–π–Ω–µ.\n\n'
                         '–ò—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã –≥–∞–π–¥–∞ <b>—Å –æ–ø—ã—Ç–æ–º –ø–µ—Ä–µ—É–±–µ–∂–¥–µ–Ω–∏—è</b> –±–ª–∏–∑–∫–∏—Ö, –∞ '
                         '<b>–ø—Å–∏—Ö–æ–ª–æ–≥–∏, —Å–æ—Ü–∏–æ–ª–æ–≥–∏ –∏ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—ã</b> –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞—É—á–Ω—É—é –±–∞–∑—É.\n\n'
                         '–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–æ–π–Ω–µ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º.\n\n'
                         '–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ <b>—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∫–ª–∞–¥ –∏ —ç–º–ø–∞—Ç–∏—è</b> –ø–æ–º–æ–≥—É—Ç ¬´–≤–µ—Ä–Ω—É—Ç—å —Å–≤—è–∑—å¬ª '
                         '—Å –±–ª–∏–∑–∫–∏–º–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–ª—ã—à–∞—Ç—å, '
                         '–º—ã—Å–ª–∏—Ç—å –∏ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è—Ç—å –ª–æ–∂–Ω—ã–º –º–Ω–µ–Ω–∏—è–º.',
                         reply_markup=InlineMarkups.create_im(1, ['–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], ['main_menu']))
    await message.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞",
                         reply_markup=InlineMarkups.create_im(2, ['–î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                                  '–£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                                  '–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
                                                                  '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤',
                                                                  '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API'],
                                                              ['admin_promote_ib',
                                                               'admin_remove_ib',
                                                               'admins_list_ib',
                                                               'last_10_feedbacks_ib',
                                                               'get_data_from_gs']))


# ------------------- GET DATA FROM API ------------------
async def get_data_from_gs(call: CallbackQuery) -> None:
    await call.answer(cache_time=10)
    rng = 'B2:E'
    shts = ['assertions', 'facts',
            'a_assertions', 'a_facts',
            'main_menu', 'data_privacy',
            'practice_questions', 'practice_answers',
            'adv_assertions', 'adv_answers']
    await GoogleSheetsAPI.get_data(rng, shts, call)


# ------------------- PROMOTE TO ADMIN -------------------
async def add_new_admin(call: CallbackQuery) -> None:
    await call.answer(cache_time=10)
    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ ID –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    await FSMAddAdmin.add_admin_id.set()


async def new_admin_id(message: Message, state: FSMContext) -> None:  # state: add_admin_id
    if message.text.isdigit() and 5 <= len(message.text) <= 10:
        async with state.proxy() as data:
            data['admin_id'] = message.text
            await message.answer('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
            await FSMAddAdmin.next()
    else:
        await message.answer('ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –Ω–µ –º–µ–Ω–µ–µ 5 –∏ –Ω–µ –±–æ–ª–µ–µ 10 –∑–Ω–∞–∫–æ–≤!')


async def new_admin_name(message: Message, state: FSMContext) -> None:  # state: add_admin_name
    if not message.text.isdigit() and 3 <= len(message.text) <= 15:
        async with state.proxy() as data:
            data['admin_name'] = message.text
            await message.answer(
                f"–î–æ–±–∞–≤–∏—Ç—å\n\n–ò–º—è: <b>{data['admin_name']}</b>, ID: <b>{data['admin_id']}</b>\n\n–≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤?",
                reply_markup=ReplyMarkups.create_rm(2, True, '–î–æ–±–∞–≤–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'))
        await FSMAddAdmin.next()
    else:
        await message.answer('–ò–º—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –Ω–µ –º–µ–Ω–µ–µ 3-—Ö –∏ –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤!')


async def new_admin_confirm(message: Message, state: FSMContext) -> None:  # state: confirm
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        async with state.proxy() as data:
            if await SQLInserts.create_admin(admin_id=data['admin_id'], admin_name=data['admin_name']) is False:
                await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –¥–∞–Ω–Ω—ã–º ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
                                     ' –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è, —Ç–æ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ–≥–æ'
                                     ' –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º')
                await message.delete()
                return await state.finish()
            await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
            return await message.delete()
    else:
        await message.delete()
        await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω')
    await state.finish()


# --------------------- REMOVE ADMIN ---------------------
async def delete_admin_from_list(call: CallbackQuery) -> None:
    await call.answer(cache_time=10)
    admins_list = SQLRequests.select_all_admins()
    if admins_list == '–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç':
        await call.message.answer('–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç - —É–¥–∞–ª—è—Ç—å –Ω–µ–∫–æ–≥–æ üò±')
        return
    await call.answer(cache_time=10)
    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞–∫–æ–≤ —Ö–µ—à–∞ —É–¥–∞–ª—è–µ–º–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    await FSMDeleteAdmin.delete_admin_id.set()


async def delete_admin_id(message: Message, state: FSMContext) -> None:  # state: delete_admin_id
    if len(message.text) == 10:
        async with state.proxy() as data:
            data['admin_id'] = message.text
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:",
                                 reply_markup=ReplyMarkups.create_rm(2, True, '–£–¥–∞–ª–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'))
            await FSMDeleteAdmin.next()
    else:
        await message.answer('–•–µ—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 —Å–∏–º–≤–æ–ª–æ–≤!')


# state: confirm
async def delete_admin_confirm(message: Message, state: FSMContext) -> None:
    if message.text == '–£–¥–∞–ª–∏—Ç—å':
        async with state.proxy() as data:
            if await SQLDeletions.delete_from_table(table='list_of_admins', column='admin_id', value=data['admin_id']):
                await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω')
                await message.delete()
                return await state.finish()
            await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!')
            return await message.delete()
    else:
        await message.delete()
        await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω')
    await state.finish()


# ------------------- SELECT ALL ADMINS ------------------
async def select_admins(call: CallbackQuery) -> None:
    await call.answer(cache_time=10)
    await call.message.answer(SQLRequests.select_all_admins())
    # await call.message.answer(*SQLRequests.all_admins_list()) # for testing purpuses


# ------------------- LAST 10 FEEDBACKS ------------------
async def last_10_feedbacks(call: CallbackQuery) -> None:
    await call.answer(cache_time=10)
    await call.message.answer(SQLRequests.last10_fb())

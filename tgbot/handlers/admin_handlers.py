from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
# from tgbot.handlers import start_handler
from tgbot.kb import ReplyMarkups, InlineMarkups
from tgbot.utils import create_admin, FSMAddAdmin, FSMDeleteAdmin, select_all_admins, last10_fb, \
    FSMAddAssertion, check_if_item_exists, add_to_child_table, delete_from_table, add_to_table, \
    select_by_table_and_column, get_assertions


async def admin_start(message: Message):
    await message.answer_photo(
        photo=open('tgbot/assets/menu.jpg', 'rb'),
        caption='–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å?',
        reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu', 'main_menu_name')))
    await message.answer("üí¨ <b>–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞</b>\n –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n\n"
                         "üèãÔ∏è‚Äç‚ôÇ <b>–°–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</b>\n –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–∏–∞–ª–æ–≥—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n\n"
                         "üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</b>\n –£–∑–Ω–∞—Ç—å, –∫–∞–∫ –±–µ—Ä–µ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–ª–∏–∑–∫–∏–º–∏.\n\n"
                         "üìö <b>–ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>\n –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
                         "ü§ì <b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</b>\n –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º –æ –ø—Ä–æ–µ–∫—Ç–µ.",
                         reply_markup=InlineMarkups.create_im(1, ['–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ'], ['more_about_project'],
                                                              ['https://relocation.guide/most']))
    await message.delete()
    await message.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞", reply_markup=InlineMarkups.create_im(2,
                                                                                                   [
                                                                                                       '–î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                                                                       '–£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                                                                       '–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
                                                                                                       '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤',
                                                                                                       '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª'],
                                                                                                   ['admin_promote_ib',
                                                                                                    'admin_remove_ib',
                                                                                                    'admins_list_ib',
                                                                                                    'last_10_feedbacks_ib',
                                                                                                    'add_section_ib']))


# ------------------- PROMOTE TO ADMIN -------------------
async def add_new_admin(call: CallbackQuery):
    await call.answer(cache_time=10)
    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ ID –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    await FSMAddAdmin.add_admin_id.set()


async def new_admin_id(message: Message, state: FSMContext):  # state: add_admin_id
    if message.text.isdigit() and 5 <= len(message.text) <= 10:
        async with state.proxy() as data:
            data['admin_id'] = message.text
            await message.answer('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
            await FSMAddAdmin.next()
    else:
        await message.answer('ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –Ω–µ –º–µ–Ω–µ–µ 5 –∏ –Ω–µ –±–æ–ª–µ–µ 10 –∑–Ω–∞–∫–æ–≤!')


async def new_admin_name(message: Message, state: FSMContext):  # state: add_admin_name
    if not message.text.isdigit() and 3 <= len(message.text) <= 15:
        async with state.proxy() as data:
            data['admin_name'] = message.text
            await message.answer(
                f"–î–æ–±–∞–≤–∏—Ç—å\n\n–ò–º—è: <b>{data['admin_name']}</b>, ID: <b>{data['admin_id']}</b>\n\n–≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤?",
                reply_markup=ReplyMarkups.create_rm(2, True, '–î–æ–±–∞–≤–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'))
        await FSMAddAdmin.next()
    else:
        await message.answer('–ò–º—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –Ω–µ –º–µ–Ω–µ–µ 3-—Ö –∏ –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤!')


async def new_admin_confirm(message: Message, state: FSMContext):  # state: confirm
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        async with state.proxy() as data:
            if await create_admin(admin_id=data['admin_id'], admin_name=data['admin_name']) is False:
                await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –¥–∞–Ω–Ω—ã–º ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
                                     ' –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è, —Ç–æ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ–≥–æ'
                                     ' –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º')
                await message.delete()
                return await state.finish()
            await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
            return await message.delete()
    else:
        await message.delete()
        await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω')
    await state.finish()


# --------------------- REMOVE ADMIN ---------------------
async def delete_admin_from_list(call: CallbackQuery):  # TODO: Check if list is empty
    admins_list = select_all_admins()
    if admins_list == '–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç':
        return await call.message.answer('–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç - —É–¥–∞–ª—è—Ç—å –Ω–µ–∫–æ–≥–æ üò±')
    await call.answer(cache_time=10)
    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ö–µ—à —É–¥–∞–ª—è–µ–º–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    await FSMDeleteAdmin.delete_admin_id.set()


async def delete_admin_id(message: Message, state: FSMContext):  # state: delete_admin_id
    if len(message.text) == 64:
        async with state.proxy() as data:
            data['admin_id'] = message.text
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:",
                                 reply_markup=ReplyMarkups.create_rm(2, True, '–£–¥–∞–ª–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'))
            await FSMDeleteAdmin.next()
    else:
        await message.answer('–•–µ—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 64 —Å–∏–º–≤–æ–ª–æ–≤!')


async def delete_admin_confirm(message: Message, state: FSMContext):  # state: confirm
    if message.text == '–£–¥–∞–ª–∏—Ç—å':
        async with state.proxy() as data:
            if await delete_from_table(table='list_of_admins', column='admin_id', value=data['admin_id']):
                await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω')
                await message.delete()
                return await state.finish()
            await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!')
            return await message.delete()
    else:
        await message.delete()
        await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω')
    await state.finish()


# ------------------- SELECT ALL ADMINS ------------------
async def select_admins(call: CallbackQuery):
    await call.answer(cache_time=10)
    await call.message.answer(select_all_admins())
    # await call.message.answer(all_admins_list()) # for testing purpuses


# ------------------- LAST 10 FEEDBACKS ------------------
async def last_10_feedbacks(call: CallbackQuery):
    await call.answer(cache_time=10)
    await call.message.answer(last10_fb())


# --------------------- ADD ASSERTION --------------------
async def assertion_init(call: CallbackQuery):
    await call.answer(cache_time=10)
    await call.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ',
                              reply_markup=ReplyMarkups.create_rm(3, True, *get_assertions()))
    await FSMAddAssertion.initialize.set()


async def check_assertion(message: Message, state: FSMContext):  # state: initialize
    assertion = check_if_item_exists(table='assertions', column='assertion_name', value=message.text)
    async with state.proxy() as data:
        data['assertion'] = message.text
    if assertion is False:
        await message.answer('–≠—Ç–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤–∏—Ç—å?',
                             reply_markup=ReplyMarkups.create_rm(2, True, '–î–æ–±–∞–≤–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'))
        return await FSMAddAssertion.add_assertion.set()  # state: add_assertion
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥—Ä—É–º–µ–Ω—Ç—ã –∫ —ç—Ç–æ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é, –ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Ä–∞–∑:',
                         reply_markup=ReplyMarkups.create_rm(1, True, '–û—Ç–º–µ–Ω–∞'))
    await FSMAddAssertion.facts_init.set()  # If the argument is in the database, switch to adding facts to this argument


async def add__assertion(message: Message, state: FSMContext):  # state: add_assertion
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        await message.delete()
        async with state.proxy() as data:
            await add_to_table(table='assertions', column='assertion_name', value=data['assertion'])
            await message.answer('–ê—Ä–≥—É–º–µ–Ω—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥—Ä—É–º–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter')
            await FSMAddAssertion.facts_init.set()
    else:
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


async def facts_init(message: Message, state: FSMContext):  # state: facts_init
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.delete()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        return await state.finish()
    async with state.proxy() as data:
        data['fact'] = message.text
    await message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n\n{message.text}',
                         reply_markup=ReplyMarkups.create_rm(2, True, '–î–æ–±–∞–≤–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'))

    await FSMAddAssertion.add_facts.set()


async def add__facts(message: Message, state: FSMContext):  # state: add_facts
    # TODO: Should be a check if the fact exists in the database
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        async with state.proxy() as data:
            await add_to_child_table(parent_table='assertions', parent_table_pk_column='assertion_id',
                                     parent_table_column='assertion_name', parent_table_value=data['assertion'],
                                     child_table='facts', child_table_column='fact_name',
                                     child_table_value=data['fact'])
            await message.answer('–§–∞–∫—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç—Ä–∞–≥—Ä–≥—É–º–µ–Ω—Ç'
                                 ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"', reply_markup=ReplyMarkups.create_rm(2, True, '–û—Ç–º–µ–Ω–∞'))
            await FSMAddAssertion.facts_init.set()
    else:
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["start"], state="*", is_su=True)
    # ------------------- PROMOTE TO ADMIN -------------------
    dp.register_callback_query_handler(add_new_admin, text='admin_promote_ib', state="*", is_su=True)
    dp.register_message_handler(new_admin_id, state=FSMAddAdmin.add_admin_id, is_su=True)
    dp.register_message_handler(new_admin_name, state=FSMAddAdmin.add_admin_name, is_su=True)
    dp.register_message_handler(new_admin_confirm, state=FSMAddAdmin.confirm, is_su=True)
    # --------------------- REMOVE ADMIN ---------------------
    dp.register_callback_query_handler(delete_admin_from_list, text='admin_remove_ib', state="*", is_su=True)
    dp.register_message_handler(delete_admin_id, state=FSMDeleteAdmin.delete_admin_id, is_su=True)
    dp.register_message_handler(delete_admin_confirm, state=FSMDeleteAdmin.confirm, is_su=True)
    # ------------------- SELECT ALL ADMINS ------------------
    dp.register_callback_query_handler(select_admins, text='admins_list_ib', state="*", is_su=True)
    # ------------------- LAST 10 FEEDBACKS ------------------
    dp.register_callback_query_handler(last_10_feedbacks, text='last_10_feedbacks_ib', state="*", is_su=True)
    # --------------------- ADD ASSERTION --------------------
    dp.register_callback_query_handler(assertion_init, text='add_section_ib', state="*", is_su=True)
    dp.register_message_handler(check_assertion, state=FSMAddAssertion.initialize, is_su=True)
    dp.register_message_handler(add__assertion, state=FSMAddAssertion.add_assertion, is_su=True)
    dp.register_message_handler(facts_init, state=FSMAddAssertion.facts_init, is_su=True)
    dp.register_message_handler(add__facts, state=FSMAddAssertion.add_facts, is_su=True)

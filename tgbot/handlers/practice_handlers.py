import contextlib

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from tgbot.handlers import main_menu
from tgbot.kb import InlineMarkups, ReplyMarkups
from tgbot.utils import SQLRequests
from tgbot.utils.util_classes import SectionName


def register_practice_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(practice_mode, commands=["practice"], state="*")
    dp.register_message_handler(practice_mode,
                                Text(equals=['üèã –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞', '–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!'], ignore_case=True),
                                state="*")
    dp.register_callback_query_handler(practice_start, text='lets_go', state="*")
    dp.register_callback_query_handler(practice_reaction, text=['1', '2', '3'], state="*")
    dp.register_callback_query_handler(practice_continue, text=['practice_continue'], state="*")
    dp.register_callback_query_handler(do_it_again, text=['do_it_again'], state="*")


async def practice_mode(message: Message, state: FSMContext) -> None:
    SectionName.s_name = '–°–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞'  # for logging purposes
    async with state.proxy() as data:
        data['p_flag'], data['score'], data['p_query'], data['question'], data['p_counter'] = False, 0, None, None, 0
    await  message.answer_photo(
        photo=open('tgbot/assets/practice.jpg', 'rb'),
        caption='üü¢ –ú–û–°–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞.', reply_markup=ReplyKeyboardRemove())
    await  message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã —É–º–µ–µ—Ç–µ –±–æ—Ä–æ—Ç—å—Å—è —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–æ–π.'
                          ' –ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å 10 –º–∏—Ñ–æ–≤ –æ –≤–æ–π–Ω–µ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–æ–±—Ä–∞–ª–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî'
                          ' –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ, –∞ –±–æ—Ç –ú–û–°–¢ –¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.',
                          reply_markup=InlineMarkups.create_im(2, ['–ü–æ–µ—Ö–∞–ª–∏! üöÄ', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                               ['lets_go', 'main_menu']))


async def practice_start(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer(cache_time=5)
    try:
        async with state.proxy() as data:
            if data['p_flag'] is False and data['score'] == 0:
                await call.answer(cache_time=5)
                cases = InlineMarkups.create_im(3, ['1', '2', '3'], ['1', '2', '3'])
                data['p_query'] = SQLRequests.get_practice_questions()
                data['question'] = data['p_query'][data['p_counter']] #WARNING! If the table is empty IndexError is raised!
                data['p_answers'] = SQLRequests.get_practice_answers(data['question'][1])  # type: ignore
                await  call.message.answer(data['question'][0], reply_markup=cases)  # type: ignore
            else:
                await call.message.answer('–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?',
                                          reply_markup=InlineMarkups.create_im(2, ['–°–Ω–∞—á–∞–ª–∞!', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç'],
                                                                               ['do_it_again', 'practice_continue']))
    except (KeyError, IndexError):
        return await key_error(call, state)


async def practice_reaction(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer(cache_time=5)
    async with state.proxy() as data:
        try:
            if data['p_flag'] is False:
                data['p_flag'] = True
                con = InlineMarkups.create_im(2, ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'], ['practice_continue', 'main_menu'])
                with contextlib.suppress(TypeError):
                    if call.data == '1':
                        data['score'] = data['score'] + int(data['p_answers'][0][1])
                        await call.message.answer(data['p_answers'][0][0], reply_markup=con)
                    elif call.data == '2':
                        data['score'] = data['score'] + int(data['p_answers'][1][1])
                        await call.message.answer(data['p_answers'][1][0], reply_markup=con)
                    else:
                        data['score'] = data['score'] + int(data['p_answers'][2][1])
                        await call.message.answer(data['p_answers'][2][0], reply_markup=con)
        except KeyError:
            return await key_error(call, state)


async def practice_continue(call: CallbackQuery, state: FSMContext) -> None:
    async with state.proxy() as data:
        try:
            if data['p_counter'] == len(data['p_query']) - 1:
                menu = ReplyMarkups.create_rm(3, True, '–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!', 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞',
                                              'üìö –ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                if data['score'] < 8:
                    await call.message.answer('<b>–£–±–µ–¥–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å</b> üôÅ\n'
                                              '–ü–æ—á–∏—Ç–∞–π—Ç–µ –Ω–∞—à—É –±–∞–∑—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –ø–æ –≤–µ–¥–µ–Ω–∏—é –¥–∏–∞–ª–æ–≥–æ–≤,'
                                              ' —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Ä–µ–∂–Ω—É—é –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é.',
                                              reply_markup=menu)
                elif 7 < data['score'] < 15:
                    await call.message.answer('<b>–ù–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!</b> ‚ùó\n'
                                              '–í—ã —Å–º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ—á—Ç–∏ –Ω–∞ –≤—Å–µ —Ç–µ–∑–∏—Å—ã. '
                                              '–ü–æ—á–∏—Ç–∞–π—Ç–µ –Ω–∞—à—É –±–∞–∑—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –ø–æ –≤–µ–¥–µ–Ω–∏—é –¥–∏–∞–ª–æ–≥–æ–≤,'
                                              ' —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏–º–µ—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.',
                                              reply_markup=menu)
                else:
                    await call.message.answer('<b>–û–ø–ø–æ–Ω–µ–Ω—Ç —É–±–µ–∂–¥–µ–Ω!</b> ‚úÖ\n'
                                              '–ë–µ—Ä–µ–∂–Ω–æ—Å—Ç—å, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è '
                                              '‚Äì —Ç–æ, —á—Ç–æ –≤–∞–º –ø–æ–º–æ–≥–ª–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –ë—Ä–∞–≤–æ.',
                                              reply_markup=InlineMarkups.create_im(1, ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], ['main_menu']))
                data['p_flag'], data['score'], data['p_counter'] = False, 0, 0
                return
        except KeyError:
            return await key_error(call, state)

        await call.answer(cache_time=5)
        cases = InlineMarkups.create_im(3, ['1', '2', '3'], ['1', '2', '3'])

        try:
            if data['p_flag'] is True and 'question' in data.keys():
                data['p_flag'] = False
                data['p_counter'] += 1
                data['question'] = data['p_query'][data['p_counter']]
                data['p_answers'] = SQLRequests.get_practice_answers(data['question'][1])
            elif 'question' not in data.keys():
                return await main_menu(call.message, state)
            else:
                await  call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚¨á')
        except KeyError:
            return await key_error(call, state)
        try:
            await  call.message.answer(data['question'][0], reply_markup=cases)
        except KeyError:
            return await key_error(call, state)


async def do_it_again(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer(cache_time=5)
    async with state.proxy() as data:
        data['p_flag'], data['score'], data['p_query'], data['question'], data['p_counter'] = False, 0, None, None, 0
    await practice_start(call, state)


async def key_error(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer(cache_time=5)
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await call.message.answer('–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                              '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                              reply_markup=InlineMarkups.create_im(1, ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], ['main_menu']))

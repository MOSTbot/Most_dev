from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from tgbot.handlers import main_menu
from tgbot.kb import ReplyMarkups, InlineMarkups
from tgbot.utils import SQLRequests, GetFacts, GetAdFacts
from tgbot.utils.util_classes import SectionName


def register_chat_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(chat_mode, commands=["chat"], state=None)
    dp.register_message_handler(chat_mode, Text(equals='üí¨ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞', ignore_case=True), state=None)
    dp.register_message_handler(assertions, Text(equals=SQLRequests
                                                 .select_by_table_and_column('assertions', 'assertion_name'),
                                                 ignore_case=True), state=None)
    dp.register_message_handler(a_questions, Text(equals=SQLRequests
                                                  .select_by_table_and_column('a_assertions', 'a_assertion_name'),
                                                  ignore_case=True), state=None)
    dp.register_callback_query_handler(thematic_questions, text='thematic_questions', state=None)
    dp.register_callback_query_handler(cb_more_args, text='more_arguments', state=None)
    dp.register_callback_query_handler(random_questions, text=['random_questions'], state=None)


async def chat_mode(message: Message) -> None:
    SectionName.s_name = '–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞'  # for logging purposes
    await  message.answer_photo(
        photo=open('tgbot/assets/chat.jpg', 'rb'),
        caption='üü¢ –ú–û–°–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ—Ä–∞–∑—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,'
                ' –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç–¥–µ–ª–∏—Ç—å –ª–æ–∂—å –æ—Ç –ø—Ä–∞–≤–¥—ã. –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∏—Ö —Å–∏–ª—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ú–û–°–¢ –µ—â–µ –∫—Ä–µ–ø—á–µ.',
        reply_markup=ReplyMarkups.create_rm(2, True,
                                            *SQLRequests.select_by_table_and_column('assertions', 'assertion_name')))
    await  message.answer('<i>–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–∞</i>\n\n'
                          '–°–æ–±–µ—Å–µ–¥–Ω–∏_—Ü–∞ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º: <b>¬´–ú—ã –º–Ω–æ–≥–æ–≥–æ –Ω–µ –∑–Ω–∞–µ–º, –≤—Å—ë –Ω–µ —Ç–∞–∫ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ¬ª.</b>\n\n'
                          '<b>–§—Ä–∞–∑–∞-–º–æ—Å—Ç ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º</b> ‚¨á\n'
                          '–°–æ–≥–ª–∞—à—É—Å—å, —á—Ç–æ –º—ã –º–Ω–æ–≥–æ–≥–æ –Ω–µ –∑–Ω–∞–µ–º. –ù–æ –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äì'
                          ' –≤—ã—Å—à–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ–±—â–µ—Å—Ç–≤–∞, –≤–µ—Ä–Ω–æ?\n\n'
                          '<b>–ê—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã</b> ‚¨á\n'
                          '–Ø –∑–Ω–∞—é –æ–¥–Ω–æ: –≤–æ–π–Ω–∞ –Ω–µ—Å–µ—Ç —Å–º–µ—Ä—Ç—å. –ò–∑-–∑–∞ –≤–æ–π–Ω —Å—Ç—Ä–∞–¥–∞—é—Ç –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏.'
                          ' –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—É—á–∏–ª–∞ –Ω–∞—Å —ç—Ç–æ–º—É, –Ω–æ –ø–æ—á–µ–º—É-—Ç–æ –º—ã –¥—É–º–∞–µ–º, —á—Ç–æ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–æ–π–Ω—É –±–µ–∑ –∂–µ—Ä—Ç–≤.'
                          ' –¢–∞–∫ –Ω–µ –±—ã–≤–∞–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é.\n\n'
                          '<b>–ù–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</b> ‚¨á\n'
                          '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?\n\n'
                          '–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –≤–º–µ—Å—Ç–µ, –Ω–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω–∏ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n\n'
                          '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞,'
                          ' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü—É—Ç–∏–Ω –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç¬ª –∏–ª–∏ ¬´–≠—Ç–æ –≤–æ–π–Ω–∞ —Å –ù–ê–¢–û¬ª ‚¨á')


# WARNING: Catch exception 'Message text is empty' (Admin has not added any facts yet)
async def assertions(message: Message, state: FSMContext) -> None:  # These are callback-buttons!
    async with state.proxy() as data:
        data['message_text'], data['c_generator']  = message.text, GetFacts(message.text)
        await  message.answer(next(data['c_generator']),
                             reply_markup=InlineMarkups.create_im(2, ['–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', '–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã', 'üëç', 'üëé',
                                                                      '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                                  ['more_arguments', 'thematic_questions', 'like_btn',
                                                                   'dislike_btn', 'feedback',
                                                                   'main_menu']))


async def cb_more_args(call: CallbackQuery, state: FSMContext) -> None:
    try:
        await call.answer(cache_time=5)
        try:
            async with state.proxy() as data:
                await call.message.answer(next(data['c_generator']),
                                          reply_markup=InlineMarkups.create_im(2, ['–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', '–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã',
                                                                                   'üëç', 'üëé',
                                                                                   '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                                               ['more_arguments', 'thematic_questions',
                                                                                'some callback', 'some callback',
                                                                                'feedback', 'main_menu']))
        except TypeError:
            await state.finish()
            await main_menu(call.message, state)

    except StopIteration:
        if data['message_text'] in SQLRequests.select_by_table_and_column('assertions', 'assertion_name'):
            await  call.message.answer('–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ?',
                                       reply_markup=InlineMarkups.
                                       create_im(2, ['–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                 ['thematic_questions', 'main_menu']))
        elif data['message_text'] in SQLRequests.select_by_table_and_column('a_assertions', 'a_assertion_name'):
            other_questions = ReplyMarkups.create_rm(2, True, *SQLRequests.rnd_questions())
            await call.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:', reply_markup=other_questions)


async def thematic_questions(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer(cache_time=5)
    async with state.proxy() as data:
        if get_assertions := SQLRequests.get_assertions(data['message_text']):  # if get_assertions != []
            await call.message.answer('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è –¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã ‚¨á',
                                      reply_markup=ReplyMarkups.create_rm(2, True, *get_assertions))
        else:
            await call.message.answer('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è –¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã ‚¨á',
                                      reply_markup=ReplyMarkups.create_rm(2, True, *SQLRequests.rnd_questions()))


async def a_questions(message: Message, state: FSMContext) -> None:  # These are callback-buttons!
    async with state.proxy() as data:
        data['message_text'], data['c_generator'] = message.text, GetAdFacts(message.text)
        try:
            await  message.answer(next(data['c_generator']),
                                 reply_markup=InlineMarkups.create_im(2, ['–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', '–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã', 'üëç', 'üëé',
                                                                          '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                                      ['more_arguments', 'random_questions',
                                                                       'some callback',
                                                                       'some callback', 'feedback',
                                                                       'main_menu']))  # WARNING: Dynamic arguments can't be recognized!
        except StopIteration:
            await message.answer('–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                                 reply_markup=InlineMarkups.create_im(1, ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                                      ['main_menu']))


async def random_questions(call: CallbackQuery) -> None:
    await call.answer(cache_time=5)
    other_questions = ReplyMarkups.create_rm(2, True, *SQLRequests.rnd_questions())
    await call.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:', reply_markup=other_questions)

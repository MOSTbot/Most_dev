import logging

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from tgbot.kb import ReplyMarkups, InlineMarkups
from tgbot.utils import FSMFeedback, send_feedback, get_facts, get_assertions, select_by_table_and_column, \
    select_main_menu_description, find_value
from tgbot.utils.util_classes import MessageText

mt = MessageText()


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(fsm_feedback, Text(equals='ü§ì –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', ignore_case=True), state=None)
    dp.register_message_handler(fsm_feedback, commands=['feedback'], state=None)
    dp.register_message_handler(fsm_confirm_feedback, state=FSMFeedback.feedback)
    dp.register_message_handler(fsm_send_feedback, state=FSMFeedback.send_feedback)
    dp.register_message_handler(start_handler, commands=["start"], state="*")
    dp.register_message_handler(chat_mode, commands=["chat"], state="*")
    dp.register_message_handler(chat_mode, Text(equals='üí¨ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞', ignore_case=True), state="*")
    dp.register_message_handler(questions, Text(equals=[*get_assertions()], ignore_case=True),
                                # WARNING: Here's the problem with dynamic update
                                state="*")  # WARNING: SQL option
    dp.register_callback_query_handler(cb_more_args, text='more_arguments', state="*")
    dp.register_callback_query_handler(cb_feedback, text='feedback', state="*")
    dp.register_message_handler(practice_mode, commands=["practice"], state="*")
    dp.register_message_handler(practice_mode, Text(equals='üèãÔ∏è‚Äç‚ôÇ –°–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', ignore_case=True), state="*")
    dp.register_message_handler(advice_mode, commands=["advice"], state="*")
    dp.register_message_handler(advice_mode, Text(equals='üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', ignore_case=True), state="*")
    dp.register_message_handler(advice_mode2, Text(equals=[*select_by_table_and_column('advice', 'topic_name')]),
                                state="*")  # WARNING: JSON option
    dp.register_message_handler(theory_mode, commands=["theory"], state="*")
    dp.register_message_handler(theory_mode, Text(equals='üìö –ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤', ignore_case=True), state="*")
    dp.register_message_handler(text_wasnt_found, state="*")
    dp.register_callback_query_handler(cb_home, text='main_menu', state="*")


def user_log(user_id, message_text):
    return logging.info(f'{user_id=} {message_text=}')


# WARNING: Develop options for completing FSM. Not all state.finish() options have been explored
async def fsm_confirm_feedback(message: Message, state: FSMContext):
    if message.text in ['/start', '/chat', '/practice', '/advice', '/theory', '/feedback', 'ü§ì –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
                        '–û—Ç–º–µ–Ω–∞']:
        await message.answer('–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                             reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu',
                                                                                                      'main_menu_name')))
        return await state.finish()
    async with state.proxy() as data: data['user_feedback'] = message.text
    await  message.answer('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?', reply_markup=ReplyMarkups.create_rm(2, True, '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–û—Ç–º–µ–Ω–∞'))
    await FSMFeedback.next()


async def fsm_feedback(message: Message):
    await  message.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ ‚¨á', reply_markup=ReplyMarkups.create_rm(1, True, '–û—Ç–º–µ–Ω–∞'))
    await FSMFeedback.feedback.set()  # state: feedback
    # await message.delete()


async def fsm_send_feedback(message: Message, state: FSMContext):  # TODO: Checking message for text only type!
    if message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        user_id = message.from_user.id
        datetime = str(message.date)
        async with state.proxy() as data:
            send_feedback(user_id=user_id, datetime=datetime, feedback=data['user_feedback'])
        await message.answer('–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ü§ó', reply_markup=ReplyMarkups.create_rm(2, True,
                                                                                                     *select_by_table_and_column(
                                                                                                         'main_menu',
                                                                                                         'main_menu_name')))
    else:
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞!', reply_markup=ReplyMarkups.create_rm(2, True,
                                                                                                 *select_by_table_and_column(
                                                                                                     'main_menu',
                                                                                                     'main_menu_name')))
        await message.delete()
    return await state.finish()


async def start_handler(message: Message):
    # user_id = message.from_user.id
    # user_full_name = message.from_user.full_name
    # logging.info(f'{user_id=} {user_full_name=}')
    user_log(message.from_user.id, message.text)
    await message.answer_photo(
        photo=open('tgbot/assets/menu.jpg', 'rb'),
        caption='–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å?',
        reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu', 'main_menu_name')))
    await message.answer(select_main_menu_description(),
                         reply_markup=InlineMarkups.create_im(2, ['–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ'], ['some callback'], [
                             'https://relocation.guide/most']))  # FIXME: The link needs to be replaced
    await message.delete()


async def chat_mode(message: Message):
    await  message.answer_photo(
        photo=open('tgbot/assets/chat.jpg', 'rb'),
        caption='üü¢ –ú–û–°–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ—Ä–∞–∑—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,'
                ' –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç–¥–µ–ª–∏—Ç—å –ª–æ–∂—å –æ—Ç –ø—Ä–∞–≤–¥—ã. –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∏—Ö —Å–∏–ª—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ú–û–°–¢ –µ—â–µ –∫—Ä–µ–ø—á–µ.',
        reply_markup=ReplyMarkups.create_rm(3, True, *get_assertions()))
    await  message.answer('<i>–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–∞</i>\n\n'
                          '–°–æ–±–µ—Å–µ–¥–Ω–∏_—Ü–∞ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º: <b>¬´–ú—ã –º–Ω–æ–≥–æ–≥–æ –Ω–µ –∑–Ω–∞–µ–º, –≤—Å—ë –Ω–µ —Ç–∞–∫ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ¬ª.</b>\n\n'
                          '<b>–§—Ä–∞–∑–∞-–º–æ—Å—Ç ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º</b> ‚¨á\n'
                          '–°–æ–≥–ª–∞—à—É—Å—å, —á—Ç–æ –º—ã –º–Ω–æ–≥–æ–≥–æ –Ω–µ –∑–Ω–∞–µ–º. –ù–æ –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äì'
                          ' –≤—ã—Å—à–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ–±—â–µ—Å—Ç–≤–∞, –≤–µ—Ä–Ω–æ?\n\n'
                          '<b>–ê—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã</b> ‚¨á\n'
                          '–Ø –∑–Ω–∞—é –æ–¥–Ω–æ: –≤–æ–π–Ω–∞ –Ω–µ—Å–µ—Ç —Å–º–µ—Ä—Ç—å. –ò–∑-–∑–∞ –≤–æ–π–Ω —Å—Ç—Ä–∞–¥–∞—é—Ç –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏.'
                          ' –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—É—á–∏–ª–∞ –Ω–∞—Å —ç—Ç–æ–º—É, –Ω–æ –ø–æ—á–µ–º—É-—Ç–æ –º—ã –¥—É–º–∞–µ–º, —á—Ç–æ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–æ–π–Ω—É –±–µ–∑ –∂–µ—Ä—Ç–≤.'
                          ' –¢–∞–∫ –Ω–µ –±—ã–≤–∞–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é.\n\n'
                          '<b>–ù–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</b> ‚¨á\n'
                          '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?\n\n'
                          '–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –≤–º–µ—Å—Ç–µ, –Ω–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω–∏ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n\n'
                          '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞,'
                          ' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü—É—Ç–∏–Ω –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç¬ª –∏–ª–∏ ¬´–≠—Ç–æ –≤–æ–π–Ω–∞ —Å –ù–ê–¢–û¬ª ‚¨á')
    await message.delete()

# WARNING: Catch exception 'Message text is empty' (Admin has not added any facts yet)
async def questions(message: Message):  # These are callback-buttons!
    mt.message_text = message.text
    mt.message_text = get_facts(mt.message_text)  # SQL option
    await  message.reply(next(mt.message_text),
                         reply_markup=InlineMarkups.create_im(2, ['–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã', 'üëç', 'üëé',
                                                                  '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                              ['more_arguments', 'some callback', 'some callback',
                                                               'some callback', 'feedback',
                                                               'main_menu']))  # WARNING: Dynamic arguments can't be recognized!


async def cb_more_args(call: CallbackQuery):
    try:
        await call.answer(cache_time=5)
        await call.message.answer(next(mt.message_text),
                                  reply_markup=InlineMarkups.create_im(2, ['–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã', 'üëç', 'üëé',
                                                                           '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                                       ['more_arguments', 'some callback',
                                                                        'some callback',
                                                                        'some callback', 'feedback',
                                                                        'main_menu']))  # WARNING: Dynamic arguments can't be recognized!)
    except StopIteration:
        await  call.message.answer('–ë–æ–ª—å—à–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç',
                                   reply_markup=InlineMarkups.create_im(2, ['–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                                        ['some callback',
                                                                         'main_menu']))  # For testing purposes


async def practice_mode(message: Message):
    await  message.answer_photo(
        photo=open('tgbot/assets/practice.jpg', 'rb'),
        caption='üü¢ –ú–û–°–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.', reply_markup=ReplyKeyboardRemove())
    await  message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã —É–º–µ–µ—Ç–µ –±–æ—Ä–æ—Ç—å—Å—è —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–æ–π.'
                          ' –ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å 10 –º–∏—Ñ–æ–≤ –æ –≤–æ–π–Ω–µ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–æ–±—Ä–∞–ª–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî'
                          ' –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ, –∞ –±–æ—Ç –ú–û–°–¢ –¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.',
                          reply_markup=InlineMarkups.create_im(2, ['–ü–æ–µ—Ö–∞–ª–∏! üöÄ', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], ['sc', 'main_menu']))
    await message.delete()


async def advice_mode(message: Message):
    await  message.answer_photo(
        photo=open('tgbot/assets/advice.jpg', 'rb'),
        caption='üü¢ –°–æ–±—Ä–∞–ª–∏ —Å–æ–≤–µ—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –æ —Ç–æ–º, –∫–∞–∫ –Ω–µ —Å–æ–π—Ç–∏ —Å —É–º–∞ –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –≤–æ–π–Ω–µ —Å –±–ª–∏–∑–∫–∏–º–∏,'
                ' —á–µ–≥–æ –æ–∂–∏–¥–∞—Ç—å, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Å—Ç–∏ —Å–µ–±—è.', reply_markup=ReplyKeyboardRemove())
    await  message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å ‚¨á',
                          reply_markup=ReplyMarkups.create_rm(3, True,
                                                              *select_by_table_and_column('advice', 'topic_name')))
    await message.delete()


# WARNING: JSON
async def advice_mode2(message: Message):
    await message.reply(find_value('advice', 'topic_description', 'topic_name', message.text),
                        reply_markup=ReplyMarkups.create_rm(3, True, *select_by_table_and_column('advice',
                                                                                                 'topic_name')))


async def theory_mode(message: Message):
    await message.answer('üìö', reply_markup=ReplyKeyboardRemove())  # FIXME: This message is only for keyboard remove
    await  message.answer_photo(
        photo=open('tgbot/assets/theory.jpg', 'rb'),
        caption='–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è –±–æ—Ä—Ü–∞ —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–æ–π ‚Äî —Å–∞–º—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –≤–∏–¥–µ–æ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.'
                ' –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.',
        reply_markup=InlineMarkups.create_im(2, ['–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–∞–∑—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                             ['sc', 'main_menu'], ['https://relocation.guide/most',
                                                                   None]))  # FIXME: The link needs to be replaced
    await message.delete()


async def cb_home(call: CallbackQuery):
    await call.answer(cache_time=10)
    await start_handler(call.message)


async def cb_feedback(call: CallbackQuery):
    await call.answer(cache_time=10)
    await fsm_feedback(call.message)


async def text_wasnt_found(message: Message):
    await  message.answer(
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ ‚¨á',
        reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu', 'main_menu_name')))

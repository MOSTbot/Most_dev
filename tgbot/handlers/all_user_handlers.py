import contextlib
import logging

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from tgbot.kb import ReplyMarkups, InlineMarkups
from tgbot.utils import FSMFeedback, send_feedback, get_facts, get_assertions, select_by_table_and_column, \
    select_main_menu_description, get_a_facts, get_practice_questions, get_practice_answers, rnd_questions
from tgbot.utils.util_classes import MessageText, UtilValues

mt = MessageText()


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(fsm_feedback, Text(contains='–æ—Ç–∑—ã–≤', ignore_case=True), state=None)
    dp.register_message_handler(fsm_feedback, commands=['feedback'], state=None)
    dp.register_message_handler(fsm_confirm_feedback, state=FSMFeedback.feedback)
    dp.register_message_handler(fsm_send_feedback, state=FSMFeedback.send_feedback)
    dp.register_message_handler(start, commands=["start"], state=None)
    dp.register_message_handler(menu_handler, commands=["menu"], state=None)
    dp.register_message_handler(menu_handler, Text(contains='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ignore_case=True), state=None)
    dp.register_message_handler(chat_mode, commands=["chat"], state=None)
    dp.register_message_handler(chat_mode, Text(equals='üí¨ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞', ignore_case=True), state=None)
    dp.register_message_handler(questions, Text(equals=select_by_table_and_column('assertions', 'assertion_name'),
                                                ignore_case=True),
                                state=None)  # WARNING: Here's the problem with dynamic update
    dp.register_message_handler(a_questions, Text(equals=select_by_table_and_column('a_assertions', 'a_assertion_name'),
                                                  ignore_case=True),
                                state=None)
    dp.register_callback_query_handler(thematic_questions, text='thematic_questions', state=None)
    dp.register_callback_query_handler(cb_more_args, text='more_arguments', state=None)
    dp.register_callback_query_handler(cb_feedback, text='feedback', state=None)
    dp.register_message_handler(practice_mode, commands=["practice"], state=None)
    dp.register_message_handler(practice_mode,
                                Text(equals=['üèãÔ∏è‚Äç –°–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', '–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!'], ignore_case=True),
                                state=None)
    dp.register_message_handler(advice_mode, commands=["advice"], state=None)
    dp.register_message_handler(advice_mode, Text(equals='üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', ignore_case=True), state=None)
    dp.register_message_handler(advice_mode2, Text(equals=select_by_table_and_column('advice', 'topic_name')),
                                state=None)
    dp.register_message_handler(theory_mode, commands=["theory"], state=None)
    dp.register_message_handler(theory_mode, Text(equals='üìö –ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤', ignore_case=True), state=None)
    dp.register_message_handler(text_wasnt_found, state=None)
    dp.register_callback_query_handler(cb_home, text='main_menu', state=None)
    dp.register_callback_query_handler(practice_start, text='lets_go', state=None)
    dp.register_callback_query_handler(practice_reaction, text=['1', '2', '3'], state=None)
    dp.register_callback_query_handler(practice_continue, text=['practice_continue'], state=None)
    dp.register_callback_query_handler(do_it_again, text=['do_it_again'], state=None)
    dp.register_callback_query_handler(random_questions, text=['random_questions'], state=None)


def user_log(user_id, message_text):
    return logging.info(f'{user_id=} {message_text=}')


async def fsm_feedback(message: Message):
    await  message.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ ‚¨á', reply_markup=ReplyMarkups.create_rm(1, True, '–û—Ç–º–µ–Ω–∞'))
    await FSMFeedback.feedback.set()  # state: feedback


# WARNING: Develop options for completing FSM. Not all state.finish() options have been explored
async def fsm_confirm_feedback(message: Message, state: FSMContext):
    if message.text in ['/start', '/menu', '/chat', '/practice', '/advice', '/theory', '/feedback', 'ü§ì –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
                        '–û—Ç–º–µ–Ω–∞']:
        await message.answer('–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                             reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu',
                                                                                                      'main_menu_name')))
        return await state.finish()
    async with state.proxy() as data: data['user_feedback'] = message.text
    await  message.reply('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?', reply_markup=ReplyMarkups.create_rm(2, True, '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–û—Ç–º–µ–Ω–∞'))
    await FSMFeedback.next()


async def fsm_send_feedback(message: Message, state: FSMContext):  # TODO: Checking message for text only type!
    if message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        user_id = message.from_user.id
        datetime = str(message.date)
        async with state.proxy() as data:
            send_feedback(user_id=user_id, datetime=datetime, feedback=data['user_feedback'])
        await message.answer('–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ü§ó',
                             reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu',
                                                                                                      'main_menu_name')))
    else:
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞!',
                             reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu',
                                                                                                      'main_menu_name')))
        await message.delete()
    return await state.finish()


async def start(message: Message):
    await message.answer_photo(photo=open('tgbot/assets/start.jpg', 'rb'))
    await message.answer('<b>–ú—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –∑–∞ —Ç–µ—Ö, –∫–æ–≥–æ –ø—Ä–∏—Ä—É—á–∏–ª–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞</b>.\n'
                         '–û—Å–æ–±–µ–Ω–Ω–æ –∑–∞ —Ä–æ–¥–Ω—ã—Ö, –ª—é–±–∏–º—ã—Ö –∏ –¥—Ä—É–∑–µ–π.\n\n'
                         '–†–∞–∑–≤–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–¥—É?\n'
                         '–£–≤—ã, –º–Ω–æ–≥–∏–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å —Å —Ç–µ–º, —á—Ç–æ '
                         '<b>–ø—Ä–∞–≤–¥—É –Ω–µ —Å–ª—ã—à–∞—Ç –∏–ª–∏ –Ω–µ —Ö–æ—Ç—è—Ç —Å–ª—ã—à–∞—Ç—å</b>. –ù–æ —ç—Ç–æ –Ω–µ –ø–æ–≤–æ–¥ —Å–¥–∞–≤–∞—Ç—å—Å—è.\n\n'
                         '–ú–û–°–¢ ‚Äî c–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç <a href="https://relocation.guide/">–≥–∞–π–¥–∞ –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π –º–∏—Ä</a> –∏ XZ foundation. '
                         '–≠—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –±–ª–∏–∑–∫–∏–º–∏ –æ –≤–æ–π–Ω–µ.\n\n'
                         '–ò—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã –≥–∞–π–¥–∞ <b>—Å –æ–ø—ã—Ç–æ–º –ø–µ—Ä–µ—É–±–µ–∂–¥–µ–Ω–∏—è</b> –±–ª–∏–∑–∫–∏—Ö, –∞ '
                         '<b>–ø—Å–∏—Ö–æ–ª–æ–≥–∏, —Å–æ—Ü–∏–æ–ª–æ–≥–∏ –∏ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—ã</b> –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞—É—á–Ω—É—é –±–∞–∑—É.\n\n'
                         '–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–æ–π–Ω–µ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º.\n\n'
                         '–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ <b>—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∫–ª–∞–¥ –∏ —ç–º–ø–∞—Ç–∏—è</b> –ø–æ–º–æ–≥—É—Ç ¬´–≤–µ—Ä–Ω—É—Ç—å —Å–≤—è–∑—å¬ª '
                         '—Å –±–ª–∏–∑–∫–∏–º–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–ª—ã—à–∞—Ç—å, '
                         '–º—ã—Å–ª–∏—Ç—å –∏ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è—Ç—å –ª–æ–∂–Ω—ã–º –º–Ω–µ–Ω–∏—è–º.',
                         reply_markup=InlineMarkups.create_im(1, ['–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], ['main_menu']))


async def menu_handler(message: Message):
    mt.flag = False
    # user_id = message.from_user.id
    # user_full_name = message.from_user.full_name
    # logging.info(f'{user_id=} {user_full_name=}')
    # user_log(message.from_user.id, message.text)
    await message.answer_photo(
        photo=open('tgbot/assets/menu.jpg', 'rb'),
        caption='–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å?',
        reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu', 'main_menu_name')))
    await message.answer(select_main_menu_description(),
                         reply_markup=InlineMarkups.create_im(2, ['–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ'], ['some callback'], [
                             'https://relocation.guide/most']))  # FIXME: The link needs to be replaced


async def chat_mode(message: Message):
    await  message.answer_photo(
        photo=open('tgbot/assets/chat.jpg', 'rb'),
        caption='üü¢ –ú–û–°–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ—Ä–∞–∑—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,'
                ' –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç–¥–µ–ª–∏—Ç—å –ª–æ–∂—å –æ—Ç –ø—Ä–∞–≤–¥—ã. –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∏—Ö —Å–∏–ª—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ú–û–°–¢ –µ—â–µ –∫—Ä–µ–ø—á–µ.',
        reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('assertions', 'assertion_name')))
    await  message.answer('<i>–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–∞</i>\n\n'
                          '–°–æ–±–µ—Å–µ–¥–Ω–∏_—Ü–∞ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º: <b>¬´–ú—ã –º–Ω–æ–≥–æ–≥–æ –Ω–µ –∑–Ω–∞–µ–º, –≤—Å—ë –Ω–µ —Ç–∞–∫ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ¬ª.</b>\n\n'
                          '<b>–§—Ä–∞–∑–∞-–º–æ—Å—Ç ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º</b> ‚¨á\n'
                          '–°–æ–≥–ª–∞—à—É—Å—å, —á—Ç–æ –º—ã –º–Ω–æ–≥–æ–≥–æ –Ω–µ –∑–Ω–∞–µ–º. –ù–æ –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äì'
                          ' –≤—ã—Å—à–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ–±—â–µ—Å—Ç–≤–∞, –≤–µ—Ä–Ω–æ?\n\n'
                          '<b>–ê—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã</b> ‚¨á\n'
                          '–Ø –∑–Ω–∞—é –æ–¥–Ω–æ: –≤–æ–π–Ω–∞ –Ω–µ—Å–µ—Ç —Å–º–µ—Ä—Ç—å. –ò–∑-–∑–∞ –≤–æ–π–Ω —Å—Ç—Ä–∞–¥–∞—é—Ç –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏.'
                          ' –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—É—á–∏–ª–∞ –Ω–∞—Å —ç—Ç–æ–º—É, –Ω–æ –ø–æ—á–µ–º—É-—Ç–æ –º—ã –¥—É–º–∞–µ–º, —á—Ç–æ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–æ–π–Ω—É –±–µ–∑ –∂–µ—Ä—Ç–≤.'
                          ' –¢–∞–∫ –Ω–µ –±—ã–≤–∞–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é.\n\n'
                          '<b>–ù–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</b> ‚¨á\n'
                          '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?\n\n'
                          '–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –≤–º–µ—Å—Ç–µ, –Ω–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω–∏ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n\n'
                          '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞,'
                          ' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü—É—Ç–∏–Ω –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç¬ª –∏–ª–∏ ¬´–≠—Ç–æ –≤–æ–π–Ω–∞ —Å –ù–ê–¢–û¬ª ‚¨á')


# WARNING: Catch exception 'Message text is empty' (Admin has not added any facts yet)
async def questions(message: Message):  # These are callback-buttons!
    mt.message_text = message.text
    mt.generator = get_facts(mt.message_text)  # SQL option
    await  message.reply(next(mt.generator),
                         reply_markup=InlineMarkups.create_im(2, ['–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã', 'üëç', 'üëé',
                                                                  '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                              ['more_arguments', 'thematic_questions', 'some callback',
                                                               'some callback', 'feedback',
                                                               'main_menu']))  # WARNING: Dynamic arguments can't be recognized!


async def cb_more_args(call: CallbackQuery):
    try:
        await call.answer(cache_time=5)
        await call.message.answer(next(mt.generator),
                                  reply_markup=InlineMarkups.create_im(2, ['–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã', 'üëç', 'üëé',
                                                                           '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                                       ['more_arguments', 'thematic_questions',
                                                                        'some callback',
                                                                        'some callback', 'feedback',
                                                                        'main_menu']))  # WARNING: Dynamic arguments can't be recognized!
    except StopIteration:
        if mt.message_text in select_by_table_and_column('assertions', 'assertion_name'):
            await  call.message.answer('–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ?',
                                       reply_markup=InlineMarkups.
                                       create_im(2, ['–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                 ['thematic_questions',
                                                  'main_menu']))
        elif mt.message_text in select_by_table_and_column('a_assertions', 'a_assertion_name'):
            other_questions = ReplyMarkups.create_rm(2, True, *rnd_questions())
            await call.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:', reply_markup=other_questions)


async def thematic_questions(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è –¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã ‚¨á',
                              reply_markup=ReplyMarkups.create_rm(2, True, *get_assertions(mt.message_text)))


async def a_questions(message: Message):  # These are callback-buttons!
    mt.message_text = message.text
    mt.generator = get_a_facts(mt.message_text)
    await  message.reply(next(mt.generator),
                         reply_markup=InlineMarkups.create_im(2, ['–ï—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç', '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã', 'üëç', 'üëé',
                                                                  '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                              ['more_arguments', 'random_questions', 'some callback',
                                                               'some callback', 'feedback',
                                                               'main_menu']))  # WARNING: Dynamic arguments can't be recognized!


async def practice_mode(message: Message):
    await  message.answer_photo(
        photo=open('tgbot/assets/practice.jpg', 'rb'),
        caption='üü¢ –ú–û–°–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.', reply_markup=ReplyKeyboardRemove())
    await  message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã —É–º–µ–µ—Ç–µ –±–æ—Ä–æ—Ç—å—Å—è —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–æ–π.'
                          ' –ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å 10 –º–∏—Ñ–æ–≤ –æ –≤–æ–π–Ω–µ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–æ–±—Ä–∞–ª–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî'
                          ' –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ, –∞ –±–æ—Ç –ú–û–°–¢ –¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.',
                          reply_markup=InlineMarkups.create_im(2, ['–ü–æ–µ—Ö–∞–ª–∏! üöÄ', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                               ['lets_go', 'main_menu']))


async def advice_mode(message: Message):
    await  message.answer_photo(
        photo=open('tgbot/assets/advice.jpg', 'rb'),
        caption='üü¢ –°–æ–±—Ä–∞–ª–∏ —Å–æ–≤–µ—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –æ —Ç–æ–º, –∫–∞–∫ –Ω–µ —Å–æ–π—Ç–∏ —Å —É–º–∞ –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –≤–æ–π–Ω–µ —Å –±–ª–∏–∑–∫–∏–º–∏,'
                ' —á–µ–≥–æ –æ–∂–∏–¥–∞—Ç—å, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Å—Ç–∏ —Å–µ–±—è.', reply_markup=ReplyKeyboardRemove())
    await  message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å ‚¨á',
                          reply_markup=ReplyMarkups.create_rm(2, True,
                                                              *select_by_table_and_column('advice', 'topic_name')))
    await message.delete()


async def advice_mode2(message: Message):
    await message.reply(*select_by_table_and_column('advice', 'topic_description', 'topic_name', message.text),
                        reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('advice',
                                                                                                 'topic_name')))


async def theory_mode(message: Message):
    await message.answer('üìö', reply_markup=ReplyKeyboardRemove())  # FIXME: This message is only for keyboard remove
    await  message.answer_photo(
        photo=open('tgbot/assets/theory.jpg', 'rb'),
        caption='–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è –±–æ—Ä—Ü–∞ —Å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–æ–π ‚Äî —Å–∞–º—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –≤–∏–¥–µ–æ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.'
                ' –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.',
        reply_markup=InlineMarkups.create_im(2, ['–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–∞–∑—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                             ['sc', 'main_menu'], ['https://relocation.guide/most',
                                                                   None]))  # FIXME: The link needs to be replaced


async def cb_home(call: CallbackQuery):
    await call.answer(cache_time=5)
    await menu_handler(call.message)


async def cb_feedback(call: CallbackQuery):
    await call.answer(cache_time=5)
    await fsm_feedback(call.message)


async def practice_start(call: CallbackQuery):
    await call.answer(cache_time=5)
    if mt.flag is False and mt.score == 0:
        await call.answer(cache_time=5)
        cases = InlineMarkups.create_im(3, ['1', '2', '3'], ['1', '2', '3'])
        mt.generator = get_practice_questions()
        mt.value = next(mt.generator)
        mt.p_answers = get_practice_answers(mt.value[1])
        await  call.message.answer(mt.value[0], reply_markup=cases)
    else:
        await call.message.answer('–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?',
                                  reply_markup=InlineMarkups.create_im(2, ['–°–Ω–∞—á–∞–ª–∞!', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç'],
                                                                       ['do_it_again', 'practice_continue']))


async def practice_reaction(call: CallbackQuery):
    await call.answer(cache_time=5)
    if mt.flag is False:
        mt.flag = True
        con = InlineMarkups.create_im(2, ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'], ['practice_continue', 'main_menu'])
        with contextlib.suppress(TypeError):
            if call.data == '1':
                mt.score = mt.score + mt.p_answers[0][1]
                await call.message.answer(mt.p_answers[0][0], reply_markup=con)
            elif call.data == '2':
                mt.score = mt.score + mt.p_answers[1][1]
                await call.message.answer(mt.p_answers[1][0], reply_markup=con)
            else:
                mt.score = mt.score + mt.p_answers[2][1]
                await call.message.answer(mt.p_answers[2][0], reply_markup=con)


async def practice_continue(call: CallbackQuery):
    try:
        await call.answer(cache_time=5)
        cases = InlineMarkups.create_im(3, ['1', '2', '3'], ['1', '2', '3'])
        if mt.flag is True:
            mt.flag = False
            mt.value = next(mt.generator)
            mt.p_answers = get_practice_answers(mt.value[1])
        else:
            await  call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚¨á')
        await  call.message.answer(mt.value[0], reply_markup=cases)
    except StopIteration:
        menu = ReplyMarkups.create_rm(3, True, '–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!', 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞',
                                      'üìö –ë–∞–∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        if mt.score < 8:
            await call.message.answer('<b>–£–±–µ–¥–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å</b> üôÅ\n'
                                      '–ü–æ—á–∏—Ç–∞–π—Ç–µ –Ω–∞—à—É –±–∞–∑—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –ø–æ –≤–µ–¥–µ–Ω–∏—é –¥–∏–∞–ª–æ–≥–æ–≤,'
                                      ' —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Ä–µ–∂–Ω—É—é –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é.',
                                      reply_markup=menu)
        elif 7 < mt.score < 15:
            await call.message.answer('<b>–ù–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!</b> ‚ùó\n'
                                      '–í—ã —Å–º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ—á—Ç–∏ –Ω–∞ –≤—Å–µ —Ç–µ–∑–∏—Å—ã. '
                                      '–ü–æ—á–∏—Ç–∞–π—Ç–µ –Ω–∞—à—É –±–∞–∑—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –ø–æ –≤–µ–¥–µ–Ω–∏—é –¥–∏–∞–ª–æ–≥–æ–≤,'
                                      ' —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏–º–µ—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.',
                                      reply_markup=menu)
        else:
            await call.message.answer('<b>–û–ø–ø–æ–Ω–µ–Ω—Ç —É–±–µ–∂–¥–µ–Ω!</b> ‚úÖ\n'
                                      '–ë–µ—Ä–µ–∂–Ω–æ—Å—Ç—å, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è '
                                      '‚Äì —Ç–æ, —á—Ç–æ –≤–∞–º –ø–æ–º–æ–≥–ª–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –ë—Ä–∞–≤–æ.',
                                      reply_markup=InlineMarkups.create_im(1, ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], ['main_menu']))
        mt.flag = False
        mt.score = 0


async def do_it_again(call: CallbackQuery):
    await call.answer(cache_time=5)
    mt.flag = False
    mt.score = 0
    await practice_mode(call.message)


async def random_questions(call: CallbackQuery):
    await call.answer(cache_time=5)
    other_questions = ReplyMarkups.create_rm(2, True, *rnd_questions())
    await call.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:', reply_markup=other_questions)


async def text_wasnt_found(message: Message):
    await  message.answer(
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ ‚¨á',
        reply_markup=ReplyMarkups.create_rm(2, True, *select_by_table_and_column('main_menu', 'main_menu_name')))
